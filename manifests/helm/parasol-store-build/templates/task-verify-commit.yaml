apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: verify-commit
spec:
  workspaces:
    - name: environment
      description: Workspace to store environment files
    - name: source
      description: The git folder from git clone
  params:
    - name: username
      type: string
      description: The username of the person who triggered the pipeline
    - name: email
      type: string
      description: The email of the person who triggered the pipeline
    - name: tas-env-vars
      type: string
      description: Base64 encoded results
  results:
    - description: Output of commit verification
      name: message

  steps:
  - name: setup-and-verify
    image: 'registry.redhat.io/openshift-pipelines/pipelines-git-init-rhel9@sha256:80af5fa2d87e7c405f16575519293ca7fccc49d635b4f3d0d334dea4fbd28721'
    script: |
      #!/bin/bash
      #set -e
      # Colors for output
      RED='\033[0;31m'
      GREEN='\033[0;32m'
      YELLOW='\033[1;33m'
      NC='\033[0m' # No Color

      # Function to print colored output
      print_status() {
          echo -e "${GREEN}[INFO]${NC} $1"
      }

      print_warning() {
          echo -e "${YELLOW}[WARN]${NC} $1"
      }

      print_error() {
          echo -e "${RED}[ERROR]${NC} $1"
      }




      print_status "Pipeline triggered by user: $(params.username)"
      print_status "User email: $(params.email)"
      

      echo "$(params.tas-env-vars)" | base64 -d > /tmp/tas-env.sh
      source /tmp/tas-env.sh

      print_status "TAS environment variables initialized:"
      
      print_status "TUF URL: $TUF_URL"
      print_status "OIDC Issuer URL: $OIDC_ISSUER_URL"
      print_status "Fulcio URL: $COSIGN_FULCIO_URL"
      print_status "Rekor URL: $COSIGN_REKOR_URL"
      print_status "COSIGN CLI URL: $COSIGN_CLI_URL"
      print_status "GITSIGN CLI URL: $GITSIGN_CLI_URL"
      
      cd $(workspaces.environment.path)
      pwd

      # Download CLI binaries 
      
      print_status "Downloading cosign..."
      if ! curl -fsSL -o "$(basename "$COSIGN_CLI_URL")" "$COSIGN_CLI_URL"; then
          print_error "Failed to download cosign from $COSIGN_CLI_URL"
          exit 1
      fi

      print_status "Downloading gitsign..."
      if ! curl -fsSL -o "$(basename "$GITSIGN_CLI_URL")" "$GITSIGN_CLI_URL"; then
          print_error "Failed to download gitsign from $GITSIGN_CLI_URL"
          exit 1
      fi
      
      # Extract and install cosign
      print_status "Installing cosign..."
      if ! gunzip cosign-amd64.gz; then
          print_error "Failed to extract cosign-amd64.gz"
          exit 1
      fi
      
      chmod +x cosign-amd64
      
      if ! mv cosign-amd64 cosign; then
          print_error "Failed to install cosign"
          exit 1
      fi
      
      # Extract and install gitsign
      print_status "Installing gitsign..."
      if ! gunzip gitsign-amd64.gz; then
          print_error "Failed to extract gitsign-amd64.gz"
          exit 1
      fi
      
      chmod +x gitsign-amd64
      
      if ! mv gitsign-amd64 gitsign; then
          print_error "Failed to install gitsign"
          exit 1
      fi
      #adding the clis to the PATH
      export PATH="$(workspaces.environment.path):$PATH"
      

      print_status "CLI installation completed successfully!"
      # Configure signing settings
      print_status "Configuring signing settings..."
      git config --global commit.gpgsign "true"
      git config --global tag.gpgsign "true"
      git config --global gpg.x509.program "gitsign"
      git config --global gpg.format "x509"
      git config --global --add safe.directory $(workspaces.source.path)
      
      # Configure gitsign settings with dynamic values
      print_status "Configuring gitsign settings..."
      git config --global gitsign.fulcio "$COSIGN_FULCIO_URL"
      git config --global gitsign.issuer "$OIDC_ISSUER_URL"
      git config --global gitsign.rekor "$COSIGN_REKOR_URL"
      git config --global gitsign.clientid "trusted-artifact-signer"

      cd $(workspaces.source.path)

      git config --global --list

      cosign initialize
      gitsign version

      # Capture both stdout and stderr from gitsign verify
      GITSIGN_OUTPUT=$(gitsign verify --certificate-identity $(params.email) --certificate-oidc-issuer $OIDC_ISSUER_URL HEAD 2>&1)
      GITSIGN_EXIT_CODE=$?

      
      if [ $GITSIGN_EXIT_CODE -ne 0 ]; then
          echo "❌ Gitsign verification failed!"
          echo "📋 Gitsign message:"
          echo "$GITSIGN_OUTPUT"
          echo ""
          echo "📋 Additional information:"
          echo "Repository: $(git remote get-url origin 2>/dev/null || echo 'Unknown')"
          echo "Current HEAD: $(git rev-parse HEAD)"
          echo "Certificate identity to be verified: $(params.email)"
          echo "OIDC Issuer: $OIDC_ISSUER_URL"
          
          echo "🔍 Git log with signature information:"
          git log --show-signature -n 5 --oneline
          
          echo "📝 Recent commits:"
          git log --pretty=format:"%h %an <%ae> %s" -n 10
          
          exit 1
      else
          echo "✅ Gitsign verification passed!"
          echo "📋 Gitsign message:"
          echo "$GITSIGN_OUTPUT"
      fi

